{"version":3,"sources":["convert/to_ffmetadata.ts","dto/songNameSchemas.ts","components/AlbumInfo.tsx","dto/outformat.ts","convert/to_cue.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["timeToSeconds","time","split","reduce","acc","String","Number","metaChapterScheme","data","concat","start","end","title","youtubeTimestampsToChapterText","inputData","input","filter","string","length","map","_string$split$filter","word","_string$split$filter2","_toArray","slice","join","_ref","index","array","_ref2","_slicedToArray","startTime","next","endTime","undefined","Schemas","AlbumInfo","tags","setTags","handleTags","e","_e$target","target","name","value","prevData","_objectSpread","_defineProperty","React","createElement","className","id","onChange","A","B","C","D","type","date","genre","albumName","performer","comment","filename","OutFormat","timeFormat","outTime","timeArr","_timeArr","h","m","s","_timeArr2","schemas","time title","_string$split","_string$split2","trim","time - title","time - artist - title","_string$split$map","val","_string$split$map2","artist","time artist - title","_string$split3","_string$split4","_artistTitle$join$spl","_artistTitle$join$spl2","trackNumFromIdx","idx","youtubeTimestampsToCue","schema","chaptersText","timestamps","App","_useState","useState","_useState2","setTimestapms","_useState3","Cue","_useState4","format","setFormat","_useState5","_useState6","setData","_useState7","_useState8","cols","rows","placeholder","currentTarget","Ffmetadata","onClick","res","defaultValue","readOnly","download","href","encodeURIComponent","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d78ca80d.chunk.js","sourcesContent":["import FFMetaData from \"../dto/ffmetadata\";\n\nconst timeToSeconds = (time: string): string =>\n  time.split(':').reduce((acc, time) => String(60 * Number(acc) + Number(time)));\n\nconst parseStartEndTitle = (input: string): FFMetaData[] => {\n  const arrayFromTxt = input.split('\\n').filter((string) => string.length);\n\n  const arrTimeAndTitle = arrayFromTxt.map((string) => {\n    const [time, ...title] = string.split(' ').filter((word) => word !== '-');\n    return [time, title.join(' ')];\n  });\n\n  const arrOfObjects: FFMetaData[] = arrTimeAndTitle.map(\n    ([startTime, title], index, array) => {\n      const start = timeToSeconds(startTime);\n\n      const next = index + 1;\n\n      const endTime = next !== array.length ? array[next][0] : undefined;\n\n      const end = endTime ? timeToSeconds(endTime) : start + 10;\n\n      return { start, end, title };\n    }\n  );\n\n  return arrOfObjects;\n};\n\nconst metaChapterScheme = (data: FFMetaData): string =>\n  `[CHAPTER]\\nTIMEBASE=1/1\\nSTART=${data.start}\\nEND=${data.end}\\ntitle=${data.title}\\n`;\n\nconst youtubeTimestampsToChapterText = (inputData: string) => {\n  const chaptersText: string = parseStartEndTitle(inputData)\n    .map(metaChapterScheme)\n    .join('');\n\n  const outputText = ';FFMETADATA1\\n' + chaptersText;\n\n  return outputText;\n};\n\nexport default youtubeTimestampsToChapterText;\n","enum Schemas {\n  A = 'time title',\n  B = 'time - title',\n  C = 'time - artist - title',\n  D = 'time artist - title',\n};\nexport default Schemas;\n","import { ChangeEvent, Dispatch, SetStateAction } from \"react\";\nimport React from 'react';\nimport Tags from \"../dto/tags\";\nimport Schemas from \"../dto/songNameSchemas\";\n\nconst AlbumInfo = ({ tags, setTags }: { tags: Tags, setTags: Dispatch<SetStateAction<Tags>> }) => {\n  const handleTags = (e: ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setTags((prevData: Tags) => ({ ...prevData, [name]: value }));\n  };\n  return <div className=\"albumInfo\">\n    <label>\n      Select schema:\n      <select name=\"schema\" id=\"schema\" onChange={handleTags}>\n        <option value={Schemas.A}>{Schemas.A}</option>\n        <option value={Schemas.B}>{Schemas.B}</option>\n        <option value={Schemas.C}>{Schemas.C}</option>\n        <option value={Schemas.D}>{Schemas.D}</option>\n      </select>\n    </label>\n    <label>\n      Date:\n      <input\n        type=\"text\"\n        name=\"date\"\n        value={tags.date}\n        onChange={handleTags}\n      />\n    </label>\n    <label>\n      Genre:\n      <input\n        type=\"text\"\n        name=\"genre\"\n        value={tags.genre}\n        onChange={handleTags}\n      />\n    </label>\n    <label>\n      Album Name:\n      <input\n        type=\"text\"\n        name=\"albumName\"\n        value={tags.albumName}\n        onChange={handleTags}\n      />\n    </label>\n    <label>\n      Performer:\n      <input\n        type=\"text\"\n        name=\"performer\"\n        value={tags.performer}\n        onChange={handleTags}\n      />\n    </label>\n    <label>\n      Comment:\n      <input\n        type=\"text\"\n        name=\"comment\"\n        value={tags.comment}\n        onChange={handleTags}\n      />\n    </label>\n    <label>\n      Filename:\n      <input\n        type=\"text\"\n        name=\"filename\"\n        value={tags.filename}\n        onChange={handleTags}\n      />\n    </label>\n  </div>\n}\n\nexport default AlbumInfo;\n","enum OutFormat {\n  Cue = 'cue',\n  Ffmetadata = 'ffmetadata',\n};\nexport default OutFormat;\n\n\n","import ParseData from \"../dto/parseData\";\nimport Song from \"../dto/song\";\nimport Schemas from \"../dto/songNameSchemas\";\nimport Tags from \"../dto/tags\";\n\nconst timeFormat = (time: string) => {\n  // 06:32 shoud be 06:32:00\n  // 1:06:32 should be 66:32:00\n  let outTime = '00:00:00';\n  const timeArr = time.split(':');\n  if (timeArr.length === 3) {\n    const [h, m, s] = timeArr;\n    outTime = `${Number(h) * 60 + Number(m)}:${s}:00`;\n  }\n  if (timeArr.length === 2) {\n    const [m, s] = timeArr;\n    outTime = `${m}:${s}:00`;\n  }\n  return outTime;\n};\n\ntype Parser = (value: string, index: number, array: string[]) => Song;\n\nconst schemas: { [key in Schemas]: Parser } = {\n  'time title': (string: string): Song => {\n    const [time, ...title] = string.split(' ');\n    return { time: timeFormat(time), title: title.join(' ').trim() };\n  },\n  'time - title': (string: string): Song => {\n    const [time, ...title] = string.split(' ').filter(word => word !== '-');\n    return { time: timeFormat(time), title: title.join(' ').trim() };\n  },\n  'time - artist - title': (string: string): Song => {\n    const [time, artist, ...title] = string.split(' - ').map(val => val.trim());\n    return { time, artist, title: title.join(\" - \").trim() };\n  },\n  'time artist - title': (string: string): Song => {\n    const [time, ...artistTitle] = string.split(' ');\n    const [artist, title] = artistTitle.join(' ').split(' - ').map(val => val.trim());\n\n    return { time: timeFormat(time), title, artist };\n  },\n};\n\nconst parseByScema = (input: string, schema: Schemas): Song[] =>\n  input\n    .split('\\n')\n    .filter((string) => string.length)\n    .map(string => string.trim())\n    .map(schemas[schema]);\n\nconst trackNumFromIdx = (idx: number): string => idx + 1 < 10 ? `0${idx + 1}` : `${idx + 1}`;\n\nconst metaChapterScheme = (idx: number, data: Song): string => {\n  if (data.artist) {\n    return `  TRACK ${trackNumFromIdx(idx)} AUDIO\\n    TITLE \"${data.title}\"\\n    PERFORMER \"${data.artist}\"\\n    INDEX 01 ${data.time}\\n`\n  } else {\n    return `  TRACK ${trackNumFromIdx(idx)} AUDIO\\n    TITLE \"${data.title}\"\\n    INDEX 01 ${data.time}\\n`;\n  }\n}\nconst youtubeTimestampsToCue = (inputData: ParseData): string => {\n  const chaptersText = parseByScema(inputData.timestamps, inputData.schema)\n    .map((data, idx) => metaChapterScheme(idx, data))\n    .join('');\n  const genreStr = `REM GENRE \"${inputData.genre}\"\\n`;\n  const dateStr = `REM DATE \"${inputData.date}\"\\n`;\n  const commentStr = `REM COMMENT \"${inputData.comment}\"\\n`;\n  const performerStr = `PERFORMER \"${inputData.performer}\"\\n`;\n  const albumTitleStr = `TITLE \"${inputData.albumName}\"\\n`;\n  const filenameStr = `FILE \"${inputData.filename}\" WAVE\\n`;\n\n\n\n  const outputText = genreStr + dateStr + commentStr + performerStr + albumTitleStr + filenameStr + chaptersText;\n\n  return outputText;\n};\n\nexport default youtubeTimestampsToCue;\n","import './App.css';\nimport React from 'react';\nimport { ChangeEvent } from 'react';\nimport { useState } from 'react';\nimport youtubeTimestampsToChapterText from './convert/to_ffmetadata';\nimport AlbumInfo from './components/AlbumInfo';\nimport OutFormat from './dto/outformat';\nimport Schemas from './dto/songNameSchemas';\nimport Tags from './dto/tags';\nimport youtubeTimestampsToCue from './convert/to_cue';\n\n\nfunction App() {\n  const [timestamps, setTimestapms] = useState('');\n  const [format, setFormat] = useState(OutFormat.Cue);\n  const [data, setData] = useState('');\n  const [tags, setTags] = useState<Tags>({\n    date: '2023',\n    genre: 'Pop',\n    albumName: 'Mix',\n    performer: 'Various Artists',\n    filename: 'file.m4a',\n    comment: '',\n    schema: Schemas.A,\n  });\n\n  const handleClick = () => {\n    if (format === 'cue') {\n      const res = youtubeTimestampsToCue({ timestamps, ...tags });\n      setData(res);\n    } else if (format === 'ffmetadata') {\n      const res = youtubeTimestampsToChapterText(timestamps);\n      setData(res);\n    }\n  };\n\n  const handleFormat = (e: ChangeEvent<HTMLSelectElement>) =>\n    setFormat(e.currentTarget.value === OutFormat.Cue ? OutFormat.Cue : OutFormat.Ffmetadata);\n\n  return (\n    <div className=\"App\" >\n      <h1>Simple youtube timestamps converter </h1>\n      <textarea\n        cols={50}\n        rows={10}\n        className=\"inputText\"\n        placeholder=\"paste timestamps here...\"\n        onChange={(e) => setTimestapms(e.target.value)\n        }\n      ></textarea>\n      <label> Output format:\n        <select name=\"formats\" id=\"formats\" onChange={handleFormat} >\n          <option value={OutFormat.Cue}>CUE</option>\n          <option value={OutFormat.Ffmetadata}>ffmetadata</option>\n        </select>\n      </label>\n      {format === \"cue\" && <AlbumInfo tags={tags} setTags={setTags} />}\n      <button className=\"sendButton\" onClick={handleClick} >\n        Convert\n      </button>\n      <textarea\n        className=\"outputText\"\n        cols={50}\n        rows={10}\n        placeholder=\"conversion result should be here...\"\n        defaultValue={data}\n        readOnly\n      ></textarea>\n      <a\n        download={`${tags.filename.split('.').slice(0, -1).join('.')}.${format}`}\n        href={`data:text/plain;charset=utf-8,${encodeURIComponent(data)}`}>\n        Download {format} File\n      </a>\n      {\n        format === 'ffmetadata' && <>\n          <p>Example: </p>\n          <code>\n            ffmpeg - i file.mp4 - i file.ffmetadata - map_metadata 1 file_with_metadata.mp4\n          </code>\n        </>\n      } {\n        format === 'cue' && <>\n          <p>Download to the same directory as music file </p>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}